var search_data = {"index":{"searchIndex":["banyanbase","rbbanyan","clean_up()","incoming_message_processing()","new()","publish_payload()","receive_loop()","set_subscriber_topic()"],"longSearchIndex":["banyanbase","rbbanyan","banyanbase#clean_up()","banyanbase#incoming_message_processing()","banyanbase::new()","banyanbase#publish_payload()","banyanbase#receive_loop()","banyanbase#set_subscriber_topic()"],"info":[["BanyanBase","","BanyanBase.html","","<p>noinspection RubyResolve,RubyResolve\n"],["RbBanyan","","RbBanyan.html","",""],["clean_up","BanyanBase","BanyanBase.html#method-i-clean_up","()","<p>This method closes all zmq connections\n"],["incoming_message_processing","BanyanBase","BanyanBase.html#method-i-incoming_message_processing","(topic, payload)","<p>This method should be overwritten to process incoming messages.\n"],["new","BanyanBase","BanyanBase.html#method-c-new","(back_plane_ip_address: nil, subscriber_port: '43125', publisher_port: '43124', process_name: 'Unnamed', loop_time: 0.1)",""],["publish_payload","BanyanBase","BanyanBase.html#method-i-publish_payload","(payload, topic)","<p>@ param topic: A string value\n"],["receive_loop","BanyanBase","BanyanBase.html#method-i-receive_loop","()","<p>receive_loop\n<p>This is the receive loop for zmq messages. This method may be overwritten\nto meet the needs â€¦\n"],["set_subscriber_topic","BanyanBase","BanyanBase.html#method-i-set_subscriber_topic","(topic)","<p>: This method sets a subscriber topic.\n\n<pre>@param [Object] topic: Message topic - must be in the form of a ...</pre>\n"]]}}